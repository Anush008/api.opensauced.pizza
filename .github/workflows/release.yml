name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  test:
    name: Test and lint
    uses: open-sauced/open-sauced/.github/workflows/development.yml@main

  docker:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2

      - name: "🔧 setup buildx"
        uses: docker/setup-buildx-action@v1

      - name: "📦 docker build"
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ github.repository }}:latest
          outputs: type=docker,dest=/tmp/docker.tar
          push: false

      - name: "📂 docker artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: /tmp/docker.tar

  database:
    name: Document database
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2

      - name: "🔧 setup go"
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: "📊 install tbls"
        run: |
          curl -sL https://github.com/k1LoW/tbls/releases/download/v1.54.2/tbls_v1.54.2_linux_amd64.tar.gz > tbls.tar.gz
          file tbls.tar.gz
          tar -xf tbls.tar.gz
          sudo mv tbls /usr/local/bin/
          rm tbls.tar.gz

      - name: "📊 database visualizer"
        run: tbls doc --rm-dist
        env:
          TBLS_DSN: ${{ secrets.SUPABASE_DB_URL }}
          TBLS_DOC_PATH: ./supabase/diagrams

      - name: "📊 visualiser artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: database
          path: supabase/diagrams/

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2

      - name: "🔧 setup node"
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 18

      - name: "🔧 install npm@latest"
        run: npm i -g npm@latest

      - name: "📦 install dependencies"
        uses: bahmutov/npm-install@v1

      - name: "🚀 static app"
        run: |
          npm run build
          npm run docs

      - name: "📂 production artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

      - name: "📊 repository visualizer"
        id: diagram
        uses: githubocto/repo-visualizer@0.7.1
        with:
          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwrap.json"
          output_file: "public/diagram.svg"
          should_push: false
          root_path: "src/"

      - name: "📊 visualiser artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: diagram
          path: public/diagram.svg

  release:
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - test
      - build
      - database
      - docker
    runs-on: ubuntu-latest
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "♻️ clean up artifact paths"
        run: |
          rm -rf public/diagram.svg
          rm -rf supabase/diagrams/

      - name: "📂 download diagram artifacts"
        uses: actions/download-artifact@v2
        with:
          name: diagram
          path: public/

      - name: "📂 download database artifacts"
        uses: actions/download-artifact@v2
        with:
          name: database
          path: supabase/diagrams/

      - name: "📂 download docker artifacts"
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: "📦 load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a

      - name: "🚀 release"
        id: semantic-release
        uses: open-sauced/release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to static
    needs:
      - release
    runs-on: ubuntu-latest
    services:
      api:
        image: ghcr.io/${{ github.repository }}:latest
        ports:
          - 8080:3000
        volumes:
          - api:/usr/src/app/
    steps:
      - name: "☁️ checkout repository"
        uses: actions/checkout@v2

      - name: "📂 copy artifacts"
        run: |
          docker ps --filter id=${{ job.services.api.id }}
#          docker cp ${{ job.services.api.id }}:/usr/src/app/dist/swagger.json test.json
#          cat test.json
#          echo "space"
#          docker run --rm ghcr.io/${{ github.repository }}:latest ls -lahH /usr/src/app/dist
#          docker run --rm --volumes-from ${{ job.services.api.id }} ghcr.io/${{ github.repository }}:latest ls -lahH /usr/src/app/dist
#          docker run --rm ${{ job.services.api.id }} ls -lahH /usr/src/app/dist
#          ls -lahH .
#          ls -lahH /out
#          cat test.json

#      - name: "🚀 deploy static"
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./out
#          commit_message: ${{ github.event.head_commit.message }}
#          enable_jekyll: false
#          #cname: openapi.opensauced.pizza

  cleanup:
    name: Cleanup actions
    needs:
      - release
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: "♻️ remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            database
            diagram
            dist
            docker
